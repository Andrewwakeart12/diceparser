"use strict";
/////////////////////////////////////////////////////////////
//
// pgAdmin 4 - PostgreSQL Tools
//
// Copyright (C) 2013 - 2022, The pgAdmin Development Team
// This software is released under the PostgreSQL Licence
//
//////////////////////////////////////////////////////////////
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_dom_1 = require("react-dom");
const pgadmin4_tree_1 = require("pgadmin4-tree");
const tree_1 = require("./tree");
const react_aspen_1 = require("react-aspen");
const tree_nodes_1 = require("./tree_nodes");
const pgadmin_1 = __importDefault(require("sources/pgadmin"));
var initBrowserTree = (pgBrowser) => __awaiter(void 0, void 0, void 0, function* () {
    const MOUNT_POINT = '/browser';
    // Setup host
    let mtree = new tree_nodes_1.ManageTreeNodes();
    // Init Tree with the Tree Parent node '/browser'
    mtree.init(MOUNT_POINT);
    const host = {
        pathStyle: 'unix',
        getItems: (path) => __awaiter(void 0, void 0, void 0, function* () {
            return mtree.readNode(path);
        }),
        sortComparator: (a, b) => {
            // No nee to sort columns
            if (a._metadata && a._metadata.data._type == 'column')
                return 0;
            // Sort alphabetically
            if (a.constructor === b.constructor) {
                return pgadmin_1.default.natural_sort(a.fileName, b.fileName);
            }
            let retval = 0;
            if (a.constructor === react_aspen_1.Directory) {
                retval = -1;
            }
            else if (b.constructor === react_aspen_1.Directory) {
                retval = 1;
            }
            return retval;
        },
    };
    // Create Node
    const create = (parentPath, _data) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            let _node_path = parentPath + "/" + _data.id;
            return mtree.addNode(parentPath, _node_path, _data);
        }
        catch (error) {
            return null; // or throw error as you see fit
        }
    });
    // Remove Node
    const remove = (path, _removeOnlyChild) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield mtree.removeNode(path, _removeOnlyChild);
            return true;
        }
        catch (error) {
            return false; // or throw error as you see fit
        }
    });
    // Update Node
    const update = (path, data) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield mtree.updateNode(path, data);
            return true;
        }
        catch (error) {
            return false; // or throw error as you see fit
        }
    });
    const treeModelX = new pgadmin4_tree_1.TreeModelX(host, MOUNT_POINT);
    const itemHandle = function onReady(handler) {
        // Initialize pgBrowser Tree
        pgBrowser.tree = new tree_1.Tree(handler, mtree, pgBrowser);
        return true;
    };
    yield treeModelX.root.ensureLoaded();
    var _height = undefined;
    [...document.getElementsByClassName('wcLayoutPane')].forEach((item, index) => {
        if ($(item).find('#tree').length == 1) {
            _height = item.clientHeight - 30;
        }
    });
    // Render Browser Tree
    yield (0, react_dom_1.render)(<pgadmin4_tree_1.FileTreeX model={treeModelX} onReady={itemHandle} create={create} remove={remove} update={update} height={_height} disableCache={true}/>, document.getElementById('tree'));
});
module.exports = {
    initBrowserTree: initBrowserTree,
};
